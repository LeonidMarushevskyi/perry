security:
 oauth2:
   client:
     clientId: ${SAF_CLIENT_ID:26666godh18aaa5ut4jnvkv885}
     clientSecret: ${SAF_CLIENT_SECRET:}
     accessTokenUri: ${SAF_RETRIEVE_TOKEN_PATH:https://captokyo2020.auth.us-east-2.amazoncognito.com/oauth2/token}
     userAuthorizationUri: ${SAF_AUTH_PATH:https://captokyo2020.auth.us-east-2.amazoncognito.com/login}
     tokenName: ${TOKEN_NAME:access_token}  
     authenticationScheme: ${SAF_AUTH_SCHEME:query}
     clientAuthenticationScheme: ${SAF_CLIENT_AUTH_SCHEME:header} 
     scope: ${SAF_SCOPE:}
     useCurrentUri: ${USE_CURRENT_URI:true}
     preEstablishedRedirectUri: ${REDIRECT_URI:http://localhost:8080/perry}
   resource:
     userInfoUri: ${SAF_VALIDATE_TOKEN_PATH:https://cognito-idp.us-east-2.amazonaws.com}
     tokenInfoUri: ${SAF_VALIDATE_TOKEN_URI:https://cognito-idp.us-east-2.amazonaws.com}
     revokeTokenUri: ${SAF_REVOKE_TOKEN_URI:}
     logoutTokenUri: ${SAF_LOGOUT_URI:https://captokyo2020.auth.us-east-2.amazoncognito.com/logout}
 enable-csrf: false
spring:
  h2:
    console:
      enabled: true
      path: /h2
  datasource:
      driver-class-name: com.ibm.db2.jcc.DB2Driver
      url: ${DB_CMS_JDBC_URL:jdbc:db2://localhost:50000/DB0TDEV}
      username: ${DB_CMS_USER:db2inst1}
      password: ${DB_CMS_PASSWORD:db2inst1}
      testOnBorrow: ${DB_CMS_TEST_ON_BORROW:true}
      testWhileIdle: ${DB_CMS_TEST_WHILE_IDLE:true}
      validationQuery: select 1 from ${spring.jpa.properties.hibernate.default_schema}.userid_t fetch first 1 row only with ur
      logValidationErrors: ${DB_CMS_LOG_VALIDATION_ERRORS:false}
  jpa:
      database: db2
      show_sql: ${SHOW_SQL:true}
      properties:
          hibernate.cache.use_query_cache: false
          hibernate.current_session_context_class : org.springframework.orm.hibernate5.SpringSessionContext
          hibernate.dialect: org.hibernate.dialect.DB2Dialect
          hibernate.ddl-auto: none
          hibernate.default_schema: ${DB_CMS_SCHEMA:CWSINT}
  redis:
      host: ${REDIS_HOST:192.168.99.100}
      password: ${REDIS_PASSWORD:}
      port: ${REDIS_PORT:6379}
perry:
    identityProvider:
      idpMapping: ${IDP_MAPPING_SCRIPT:config/cognito.groovy}
    identityManager:
      idmMapping: ${IDM_MAPPING_SCRIPT:config/idm.groovy}
      idmBasicAuthUser: ${IDM_BASIC_AUTH_USER:test}
      idmBasicAuthPass: ${IDM_BASIC_AUTH_PASSWORD:test}
    jwt:
      timeout: ${TOKEN_TIMEOUT:30} #minutes
      issuer: ${TOKEN_ISSUER:perry}
      encryptionEnabled: ${TOKEN_ENCRYPTION_ENABLED:true}
      encryptionMethod: ${TOKEN_ENCRYPTION_METHOD:A256GCM}
      headless: ${HEADLESS_JWT:true}
      keyStore:
        path: ${KEYSTORE_PATH:config/enc.jceks}
        alias: ${KEYSTORE_ALIAS:test}
        password: ${KEYSTORE_PASSWORD:test}
        keyPassword : ${KEYSTORE_KEY_PASSWORD:test}
        encAlias:  ${KEYSTORE_ENC_ALIAS:enc}
        encKeyPassword: ${KEYSTORE_ENC_KEY_PASSWORD:test}
    serviceProviders:
      default:
        identityMapping: ${SP_IDENTITY_MAPPING_SCRIPT:config/default.groovy}
      intake:
        identityMapping: ${SP_INTAKE_IDENTITY_MAPPING_SCRIPT:config/intake.groovy}
    whiteList: ${WHITE_LIST:*} # urls separated by spaces.
    homePageUrl: ${HOME_PAGE_URL:/}
    showErrors: ${SHOW_ERRORS:true}
    tokenRecordTimeout: ${TOKEN_RECORD_TIMEOUT:7} # days
    idpMaxAttempts: ${IDP_MAX_ATTEMPTS:5} #amount of retries
    idpRetryTimeout: ${IDP_RETRY_TIMEOUT:500}  #milliseconds
    idpValidateInterval: ${IDP_VALIDATE_INTERVAL:2} #seconds
    loginPageUrl: ${LOGIN_PAGE_URL:/mfa-login.html}
    doraWsMaxAttempts: ${DORA_WS_MAX_ATTEMPTS:3} #amount of retries
    doraWsRetryDelayMs: ${DORA_WS_RETRY_DELAY_MS:500}  #milliseconds
    tokenStore:
        datasource:
            driver-class-name: org.postgresql.Driver
            url: ${TOKEN_STORE_JDBC_URL:jdbc:postgresql://localhost:5432/postgres_data}
            username: ${TOKEN_STORE_DB_USER:postgres_data}
            password: ${TOKEN_STORE_DB_PASSWORD:postgres_data}
            testOnBorrow: ${TOKEN_STORE_TEST_ON_BORROW:true}
            testWhileIdle: ${TOKEN_STORE_TEST_WHILE_IDLE:true}
            validationQuery: select 1
            logValidationErrors: ${TOKEN_STORE_LOG_VALIDATION_ERRORS:false}
        jpa:
           database: POSTGRESQL
           show_sql: true
           properties:
              hibernate.cache.use_query_cache: false
              hibernate.current_session_context_class : org.springframework.orm.hibernate5.SpringSessionContext
              hibernate.dialect: org.hibernate.dialect.ProgressDialect
              hibernate.ddl-auto: none
              hibernate.default_schema: ${TOKEN_STORE_SCHEMA:perry}
    liquibase:
        schema:
            change-log: classpath:/liquibase/perry_schema.xml
            default-schema: public
        structure:
            change-log: classpath:/liquibase/perry_database_master.xml
            default-schema: perry              
management:
  context-path: /manage
  port: ${ADMIN_PORT:9082}
  security:
    enabled: false
  ssl:
    enabled: false
  endpoints:
    enabled: false
    health:
      enabled: true
    info:
      enabled: false
    env:
      enabled: false
    configprops:
      enabled: false
server:
  context-path: ${CONTEXT_PATH:/perry}
  use-forward-headers: ${USE_FORWARD_HEADERS:true}
  port: ${HTTPS_PORT:8090}
  ssl:
    enabled: ${SSL_ENABLED:true}
    keyStoreType: JCEKS
    trustStoreType: JCEKS
    keyStore: ${KEYSTORE_PATH:config/enc.jceks}
    keyStorePassword: ${KEYSTORE_PASSWORD:test}
    keyPassword: ${KEYSTORE_KEY_PASSWORD:test}
  http:
    port: ${HTTP_PORT:18080}
  error:
    whitelabel:
      enabled: false
cognito:
  iamAccessKeyId: ${COGNITO_IAM_ACCESS_ID:AKIAJU74WTV5SPBEQLAA}
  iamSecretKey: ${COGNITO_IAM_SECRET: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}
  region: ${COGNITO_REGION:us-east-2}
  userpool: ${COGNITO_USERPOOL:us-east-2_9wB0x4GoP}
logging:
  file: ${LOG_FILE:perry-log.txt}
  pattern:
#    console: "%d %-5level %logger : %msg%n"
    console: "%d %-5level [%thread] [%X{REQUEST_ID}] %logger [%X{USER_ID}] : %msg%n"
    file: "%d %-5level [%thread] [%X{REQUEST_ID}] %logger [%X{USER_ID}] : %msg%n"
  level:
    gov.ca.cwds.config.logging: ${LOG_LEVEL:DEBUG}
    org:
      springframework:
        web: ${LOG_LEVEL:DEBUG}
        security: ${LOG_LEVEL:DEBUG}
      hibernate: ${LOG_LEVEL:DEBUG}
search:
#  doraUrl: ${DORA_URL:}
#  doraUrl: ${DORA_URL:http://localhost:8083}
#  doraUrl: ${DORA_URL:https://dora.preint.cwds.io}
  doraUrl: ${DORA_URL:http://localhost:8889}
  index: ${ES_USER_INDEX:users}
  type: ${ES_USER_TYPE:user}
